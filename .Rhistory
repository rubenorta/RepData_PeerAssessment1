getwd()
source('http://bioconductor.org/biocLite.R')
biocLite('rhdf5')
pg = GET('http://httpbin.org/basic-auth/user/passwd')
library(httr)
pg = GET('http://httpbin.org/basic-auth/user/passwd')
ph
pg
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
set.seed(12345)
x <- data.frame("var1" = sample(1:5), "var2" = sample(6:10), "var3" = sample(11:15))
x
x <- x[sample(1:5),];X$var2[c(1,3)] = NA
x <- x[sample(1:5),];x$var2[c(1,3)] = NA
x
x
x
x
x
set.seed(13435)
x <- data.frame("var1" = sample(1:5), "var2" = sample(6:10), "var3" = sample(11:15))
x <- x[sample(1:5),];x$var2[c(1,3)] = NA
x
x[,1]
x[,3]
x[3,]
getwd()
setwd('coursera_ds/')
restData <- read.csv('./data/Restaurants.csv')
restData
head(restData, n=3)
summary(restData)
str(restData)
table(restData$neighborhood)
salida <- table(restData$zipCode %in% c('21212'))
salida
salida$TRUE
salida[[TRUE]]
salida[[FALSE]]
salida[['FALSE']]
class(salida)
salida[1]
salida[2]
salida[FALSE]
data(UCBAdmissions)
DF <- as.data.frame(UCBAdmissions)
DF
summary(DF)
detach("package:bitops", unload=TRUE)
?along
library(kernlab)
data(spam)
str(spam[, 1:5])
set.seed(3435)
trainIndicator -
;
trainIndicator = rbinom(4601,size = 1, prob = 0.5)
table(trainIndicator)
tSpam = spam[trainIndicator == 1,]
trainSpam = spam[trainIndicator == 1,]
testSpam = spam[trainIndicator == 0,]
activity
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
```{r load_libraries, echo=FALSE, results='hide',message=FALSE, warning=FALSE}
library(dplyr)
library(data.table)
```
## Loading and preprocessing the data
Show any code that is needed to
1. Load the data (i.e. read.csv())
2. Process/transform the data (if necessary) into a format suitable for your analysis
```{r load_data}
setwd('/home/ruben/coursera_ds/RepData_PeerAssessment1')
activity <- read.csv('activity.csv',na.strings="NA")
activity$date <- as.Date(activity$date, format="%Y-%m-%d")
```
## What is mean total number of steps taken per day?
For this part of the assignment, you can ignore the missing values in the dataset.
1. Make a histogram of the total number of steps taken each day
2. Calculate and report the mean and median total number of steps taken per day
```{r mean_steps_per_day, echo=TRUE}
steps_by_date <- aggregate(steps ~ date, data = activity, FUN = sum)
hist(steps_by_date$steps, xlab="Steps", main="Number of steps taken each day")
# Calculate the mean of steps by date
mean(steps_by_date$steps, na.rm=TRUE)
# Calculate the median of steps by date
median(steps_by_date$steps, na.rm=TRUE)
```
## What is the average daily activity pattern?
1.Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
2.Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
```{r average_daily_activity}
steps_by_interval <- aggregate(steps ~ interval, data = activity, FUN = mean)
plot(steps_by_interval$steps,type='l',ylab='Number of Steps',xlab='Minutes Interval', main='Average Steps by Interval')
# Interval with the maxiumun steps
steps_by_interval$interval[which.max(steps_by_interval$steps)]
```
## Imputing missing values
Imputing missing values
Note that there are a number of days/intervals where there are missing values (coded as NA). The presence of missing days may introduce bias into some calculations or summaries of the data.
1.Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
2.Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
3.Create a new dataset that is equal to the original dataset but with the missing data filled in.
4.Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
```{r missig_values}
# Number of rows with NA values
sum(is.na(activity))
```
## Are there differences in activity patterns between weekdays and weekends?
activity
view(activity)
View(activity)
complete_na_data <- function(row) {
row$steps <- 69
}
apply(activity, 1, complete_na_data)
complete_na_data <- function(row) {
row$steps <- 69
}
apply(activity, 1, complete_na_data)
warnings()
complete_na_data <- function(row) {
if is.na(row$steps) {
row$steps <- 69
}
}
apply(activity, 1, complete_na_data)
complete_na_data <- function(row) {
if is.na(row$steps) row$steps <- 69
}
apply(activity, 1, complete_na_data)
activity <- read.csv('activity.csv',na.strings="NA")
activity$date <- as.Date(activity$date, format="%Y-%m-%d")
complete_na_data <- function(row) {
if is.na(row['steps']) {
row['steps'] <- 69
}
}
apply(activity, 1, complete_na_data)
mean_by_date <- aggregate(steps ~ date, data = activity, FUN = mean)
mean_by_date
complete_na_data <- function(row) {
if is.na(row['steps']) {
row['steps'] <- mean_by_date[row$date]
}
}
complete_na_data <- function(row) {
if is.na(row['steps']) {
row['steps'] <- mean_by_date[row['date']]
}
}
mean_by_date[2012-11-29]
mean_by_date['2012-11-29']
mean_by_date[date == '2012-11-29']
mean_by_date[date = '2012-11-29']
mean_by_date[mean_by_date$date = '2012-11-29']
mean_by_date[mean_by_date$date == '2012-11-29']
names(mean_by_date-9
names(mean_by_date)
names(mean_by_date)
mean_by_date[mean_by_date$date == '2012-11-29']
mean_by_date[mean_by_date$date]
mean_by_date[date]
mean_by_date(date)
complete_na_data <- function(row) {
if is.na(row['steps']) {
row['steps'] <- mean_by_date[date == row['date']]
}
return row
}
mean_by_date
mean_by_date[date == '2012-11-29']
mean_by_date[mean_by_date$date == '2012-11-29']
mean_by_date(mean_by_date$date == '2012-11-29')
steps_by_interval
steps_by_interval[steps_by_interval$interval == '2355']
steps_by_interval[interval == '2355']
steps_by_interval[steps_by_interval['interval'] == '2355']
steps_by_interval[steps_by_interval['interval'] == '2355']$interval
complete_na_data <- function(row) {
if is.na(row['steps']) {
data <- steps_by_interval[steps_by_interval['interval'] == row['interval']]
row['steps'] <- data$steps
}
return row
}
complete_na_data <- function(row) {
if (is.na(row['steps'])) {
data <- steps_by_interval[steps_by_interval['interval'] == row['interval']]
row['steps'] <- data$steps
}
return row
}
complete_na_data <- function(row) {
if is.na(row['steps']) {
row
}
}
complete_na_data <- function(row) {
if (is.na(row['steps'])) {
message('is NA')
echo row
}
}
complete_na_data <- function(row) {
message('is NA')
}
complete_na_data <- function(row) {
if (is.na(row['steps'])) {
message('is NA')
}
}
complete_na_data <- function(row) {
if (is.na(row['steps'])) {
row['steps'] <- 69
}
}
complete_na_data <- function(row) {
if (is.na(row['steps'])) {
interval_mean <- steps_by_interval[steps_by_interval['interval'] == row['interval']]
row['steps'] <- 69
}
}
complete_na_data <- function(row) {
if (is.na(row['steps'])) {
interval_mean <- steps_by_interval[steps_by_interval['interval'] == row['interval']]
row['steps'] <- interval_mean$steps
}
}
complete_na_data <- function(row) {
if (is.na(row['steps'])) {
interval_mean <- steps_by_interval[steps_by_interval['interval'] == row['interval']]
row['steps'] <- interval_mean$steps
}
return row
}
complete_na_data <- function(row) {
if (is.na(row['steps'])) {
interval_mean <- steps_by_interval[steps_by_interval['interval'] == row['interval']]
row['steps'] <- interval_mean$steps
}
row
}
complete_na_data <- function(row) {
if (is.na(row['steps'])) {
interval_mean <- steps_by_interval[steps_by_interval['interval'] == row['interval']]
row['steps'] <- interval_mean$steps
}
row
}
apply(activity, 1, complete_na_data)
complete_na_data <- function(row) {
if (is.na(row['steps'])) {
interval_mean <- steps_by_interval[steps_by_interval['interval'] == row['interval']]
row['steps'] <- interval_mean['steps']
}
row
}
apply(activity, 1, complete_na_data)
complete_na_data <- function(row) {
if (is.na(row['steps'])) {
interval_mean <- steps_by_interval[steps_by_interval['interval'] == row['interval']]
row['steps'] <- interval_mean['steps']
}
row
}
activity <- apply(activity, 1, complete_na_data)
activity
complete_na_data <- function(row) {
if (is.na(row['steps'])) {
#interval_mean <- steps_by_interval[steps_by_interval['interval'] == row['interval']]
#row['steps'] <- interval_mean['steps']
row['steps'] <- 69
}
row
}
activity <- apply(activity, 1, complete_na_data)
activity <- read.csv('activity.csv',na.strings="NA")
activity$date <- as.Date(activity$date, format="%Y-%m-%d")
complete_na_data <- function(row) {
if (is.na(row['steps'])) {
#interval_mean <- steps_by_interval[steps_by_interval['interval'] == row['interval']]
#row['steps'] <- interval_mean['steps']
row['steps'] <- 69
}
row
}
activity <- apply(activity, 1, complete_na_data)
activity
activity <- read.csv('activity.csv',na.strings="NA")
activity$date <- as.Date(activity$date, format="%Y-%m-%d")
activity
activity[3331]
activity['3331']
activity['3331']
activity[row = '3331']
activity[3331,]
activity <- read.csv('activity.csv',na.strings="NA")
activity$date <- as.Date(activity$date, format="%Y-%m-%d")
for (i in nrow(activity) {
if (is.na(activity[i,])) {
interval_mean <- steps_by_interval[steps_by_interval['interval'] == row[i,]['interval']]
activity[i,]['steps'] <- interval_mean['steps']
}
}
for (i in nrow(activity) {
if (is.na(activity[i,])) {
interval_mean <- steps_by_interval[steps_by_interval['interval'] == activity[i,]['interval']]
activity[i,]['steps'] <- interval_mean['steps']
}
}
activity[i,]['interval']]
activity[i,]['interval']
activity <- read.csv('activity.csv',na.strings="NA")
activity$date <- as.Date(activity$date, format="%Y-%m-%d")
activity
activity[3333,]['interval']
for (i in 1:nrow(activity)) {
if (is.na(activity[i,])) {
interval_mean <- steps_by_interval[steps_by_interval['interval'] == activity[i,]['interval']]
activity[i,]['steps'] <- interval_mean['steps']
}
}
for (i in 1:nrow(activity)) {
if (is.na(activity[i,]['steps'])) {
interval_mean <- steps_by_interval[steps_by_interval['interval'] == activity[i,]['interval']]
activity[i,]['steps'] <- interval_mean['steps']
}
}
activity[3333,]['interval']
my_interval <- activity[3333,]['interval']
my_interval
for (i in 1:nrow(activity)) {
if (is.na(activity[i,]['steps'])) {
my_interval <- activity[i,]['interval']
interval_mean <- steps_by_interval[steps_by_interval['interval'] == my_interval$interval]
activity[i,]['steps'] <- interval_mean['steps']
}
}
activity <- read.csv('activity.csv',na.strings="NA")
activity$date <- as.Date(activity$date, format="%Y-%m-%d")
for (i in 1:nrow(activity)) {
if (is.na(activity[i,]['steps'])) {
my_interval <- activity[i,]['interval']
interval_mean <- steps_by_interval[steps_by_interval['interval'] == my_interval$interval]
activity[i,]['steps'] <- interval_mean['steps']
}
}
activity
View(activity)
activity <- read.csv('activity.csv',na.strings="NA")
activity$date <- as.Date(activity$date, format="%Y-%m-%d")
activity
activity[1,]
activity[activity$interval == 0]
activity[activity['interval'] == 0]
out <- activity[activity['interval'] == 0]
View(out)
activity
activity[3333,]$steps
is.na(activity[1,]$steps)
steps_by_interval[steps_by_interval$interval ==  activity[3333,]$steps]
steps_by_interval
activity
steps_by_interval[steps_by_interval$interval == 1340]
View(steps_by_interval)
steps_by_interval[steps_by_interval$inteval == 0]
steps_by_interval
steps_by_interval[steps_by_interval$interval == 0]
steps_by_interval[steps_by_interval$interval == 0]$steps
steps_by_interval[interval == 0]$steps
steps_by_interval[interval == 0]
activity[i,]$steps
activity[i,]$interval
